color = "gray40",
size = 0.5,
alpha = 0.2) +
# geom_ribbon(
#   data = pred_lm %>% filter(model_type %in% c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)")),
#   aes(ymin = lo, ymax = hi, y = NULL),
#   alpha = 0.5,
#   fill = "lightblue"
# ) +
geom_abline(linetype = "dashed") +
geom_smooth(method = "lm", color = "blue", se = T, fill="lightblue", alpha = 0.5, lwd = 0.5) +
# geom_line(aes(y = observed), data = pred_lm %>%
#             filter(model_type %in% c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)")) ) +
labs(x = expression(Predicted ~ log (K[fs], cm ~ hr^{-1})),
y = expression(Observed ~ log (K[fs], cm ~ hr^{-1}))) +
theme_cowplot() -> p1
# evaluation dataset (n=20)
facet_title = c("Neural network (no rock)" = "(a) ANN-no-structure"
,"RandomForest (no rock, no type)" = "(b) RF-no-structure"
,"RandomForest (no rock, with type)" = "(c) RF-with-structure"
)
fig_urbandata_cap <- paste0(
"Predicted vs. observed plot for urban data. ",
"Dashed line is the 1:1 fit, and blue line with grey shading is a `observed ~ predicted` linear fit."
)
# plot with rock
# evaluation dataset (n=20)
facet_title_wr = c("Neural network (with rock)" = "(d) ANN-no-structure-with-rock"
,"RandomForest (with rock, no type)" = "(e) RF-no-structure-with-rock"
,"RandomForest (with rock, with type)" = "(f) RF-with-structure-with-rock"
)
pred_summary %>% filter(model_type %in% c("Neural network (with rock)", "RandomForest (with rock, no type)", "RandomForest (with rock, with type)")) %>%
ggplot(aes(x = mean, y = observed_log)) +  geom_point(size = 0.5) +
facet_wrap(model_type~., ncol = 1
, labeller = as_labeller(facet_title_wr)
) +
geom_errorbarh(aes(y = observed_log, xmin = lo, xmax = hi, x = NULL),
color = "gray40",
size = 0.5,
alpha = 0.2) +
# geom_ribbon(
#   data = pred_lm %>% filter(model_type %in% c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)")),
#   aes(ymin = lo, ymax = hi, y = NULL),
#   alpha = 0.5,
#   fill = "lightblue"
# ) +
geom_abline(linetype = "dashed") +
geom_smooth(method = "lm", color = "blue", se = T, fill="lightblue", alpha = 0.5, lwd = 0.5) +
# geom_line(aes(y = observed), data = pred_lm %>%
#             filter(model_type %in% c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)")) ) +
labs(x = expression(Predicted ~ log (K[fs], cm ~ hr^{-1})),
y = expression(Observed ~ log (K[fs], cm ~ hr^{-1}))) +
theme_cowplot() -> p2
plot_grid(p1, p2, ncol = 2)
ggsave("Figure2.jpg", width = 8, height = 6, dpi = 300, units = "in")
# ggsave("Figure2.pdf", width = 8, height = 6, dpi = 300, units = "in")
# summary for Table 2
# pred_summary$mean <- ifelse(pred_summary$mean < 0, 0.001, pred_summary$mean)
pred_summary %>% mutate(S_M = observed_log - mean) -> pred_summary
pred_summary %>% filter(is.finite(S_M)) -> pred_summary
pred_summary %>% select(model_type) %>% unique
var_modelType <- c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)",
"Neural network (with rock)", "RandomForest (with rock, no type)", "RandomForest (with rock, with type)")
evaluation <- function () {
results <- data.frame()
for (i in 1:length(var_modelType)) {
pred_summary %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(observed_log ~ mean, data = subdata)
inter <- summary(SLR)$coefficients[1,1] %>% round(3)
slope <- summary(SLR)$coefficients[2,1] %>% round(3)
r2 <- summary(SLR)$adj.r.squared %>% round(3)
# other model evaluation matric
E <- (sum(subdata$S_M) / length(subdata$S_M)) %>% round(3)
d <-  (1- sum(subdata$S_M^2)/sum((abs(subdata$mean-mean(subdata$observed_log))+abs(subdata$observed_log-mean(subdata$observed_log)))^2)) %>% round(3)
# EF <- 1- sum(subdata$S_M^2)/sum((subdata$observed_log-mean(subdata$observed_log))^2)
RMSE <- (sum(subdata$S_M^2)/length(subdata$S_M))^0.5 %>% round(3)
p <- t.test(subdata$S_M)$p.value %>% round(3)
results <- rbind(results, data.frame(var_modelType[i], inter, slope, r2, E, d, RMSE, p) )
}
return(results)
}
# getwd()
results <- evaluation()
write.csv(results, "results.csv", row.names = F)
results
i = 3
pred_summary %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(observed_log ~ mean, data = subdata)
subdata %>% ggplot(aes(x = mean, y = observed_log)) + geom_point() + geom_smooth(method = "lm") +
geom_abline(h = 0, v = 0)
histdata %>% ggplot(aes(x = Ksat_Rosseta, y = Ksat)) + geom_point()
i = 3
pred_summary %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(observed_log ~ mean, data = subdata)
subdata %>% ggplot(aes(x = mean, y = observed_log)) + geom_point() + geom_smooth(method = "lm") +
geom_abline(h = 0, v = 0)
histdata %>% ggplot(aes(x = Ksat_Rosseta, y = Ksat)) + geom_point()
i = 3
pred_summary %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(observed_log ~ mean, data = subdata)
subdata %>% ggplot(aes(x = mean, y = observed_log)) + geom_point() + geom_smooth(method = "lm") +
geom_abline(h = 0, v = 0)
histdata %>% ggplot(aes(x = Ksat_Rosseta, y = Ksat)) + geom_point()
pred_summary %>% filter(model_type %in% c("Neural network (no rock)")) %>%
ggplot() +
aes(x = predicted_log, y = mean) +
geom_point(aes(y = observed_log, x = mean),
size = 0.5)
subdata <- pred_summary %>% filter(model_type %in% c("Neural network (no rock)"))
fig_correlation_cap <- paste0(
"Histogram of correlation coefficients for the training and testing data."
)
pred %>%
unnest(data_prep, predicted) %>%
mutate(data_type = fct_inorder(data_type) %>% fct_recode(
"Training" = "train_data",
"Testing" = "test_data"
)) %>%
group_by(model_type, sample, data_type) %>%
summarize(corr = cor(predicted, Unsaturated_K2cm_cmhr, method = "spearman")) %>%
ggplot() +
aes(x = corr) +
geom_density() +
facet_grid(vars(model_type), vars(data_type)) +
labs(x = "Correlation between prediction and data") +
theme_cowplot()
# summary for Table 3
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) -> hist_sum
# histdata %>%
#   left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
#                                  "Top_Type")) %>% select(Percent_Sand, Percent_Silt, Percent_Clay, Ksat, Ksat_Rosseta, mean, model_type) -> hist_sum
hist_sum %>% mutate(S_M = log_Ksat - mean) -> hist_sum
var_modelType <- unique(hist_sum$model_type)
evaluation2 <- function () {
results <- data.frame()
for (i in 1:length(var_modelType)) {
hist_sum %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(log_Ksat ~ mean, data = subdata)
inter <- summary(SLR)$coefficients[1,1] %>% round(3)
slope <- summary(SLR)$coefficients[2,1] %>% round(3)
r2 <- summary(SLR)$adj.r.squared %>% round(3)
# other model evaluation matric
E <- (sum(subdata$S_M) / length(subdata$S_M)) %>% round(3)
# EF <- 1- sum(subdata$S_M^2)/sum((subdata$log_Ksat-mean(subdata$log_Ksat))^2)
RMSE <- (sum(subdata$S_M^2)/length(subdata$S_M))^0.5 %>% round(3)
d <-  (1- sum(subdata$S_M^2)/sum((abs(subdata$mean-mean(subdata$log_Ksat))+abs(subdata$log_Ksat-mean(subdata$log_Ksat)))^2)) %>% round(3)
p <- t.test(subdata$S_M)$p.value %>% round(3)
results <- rbind(results, data.frame(var_modelType[i], inter, slope, r2, E, RMSE, d, p) )
}
return(results)
}
# getwd()
results2 <- evaluation2()
write.csv(results2, "results2.csv", row.names = F)
results2
# summary for Table 3
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) -> hist_sum
# histdata %>%
#   left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
#                                  "Top_Type")) %>% select(Percent_Sand, Percent_Silt, Percent_Clay, Ksat, Ksat_Rosseta, mean, model_type) -> hist_sum
hist_sum %>% mutate(S_M = log_Ksat - mean) -> hist_sum
var_modelType <- unique(hist_sum$model_type)
evaluation2 <- function () {
results <- data.frame()
for (i in 1:length(var_modelType)) {
hist_sum %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(log_Ksat ~ mean, data = subdata)
inter <- summary(SLR)$coefficients[1,1] %>% round(3)
slope <- summary(SLR)$coefficients[2,1] %>% round(3)
r2 <- summary(SLR)$adj.r.squared %>% round(3)
# other model evaluation matric
E <- (sum(subdata$S_M) / length(subdata$S_M)) %>% round(3)
# EF <- 1- sum(subdata$S_M^2)/sum((subdata$log_Ksat-mean(subdata$log_Ksat))^2)
RMSE <- (sum(subdata$S_M^2)/length(subdata$S_M))^0.5 %>% round(3)
d <-  (1- sum(subdata$S_M^2)/sum((abs(subdata$mean-mean(subdata$log_Ksat))+abs(subdata$log_Ksat-mean(subdata$log_Ksat)))^2)) %>% round(3)
p <- t.test(subdata$S_M)$p.value %>% round(3)
results <- rbind(results, data.frame(var_modelType[i], inter, slope, r2, E, RMSE, d, p) )
}
return(results)
}
# getwd()
results2 <- evaluation2()
write.csv(results2, "results2.csv", row.names = F)
results2
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
)
# summary for Table 3
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) -> hist_sum
# histdata %>%
#   left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
#                                  "Top_Type")) %>% select(Percent_Sand, Percent_Silt, Percent_Clay, Ksat, Ksat_Rosseta, mean, model_type) -> hist_sum
hist_sum %>% mutate(S_M = log_Ksat - mean) -> hist_sum
var_modelType <- unique(hist_sum$model_type)
evaluation2 <- function () {
results <- data.frame()
for (i in 1:length(var_modelType)) {
hist_sum %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(log_Ksat ~ mean, data = subdata)
inter <- summary(SLR)$coefficients[1,1] %>% round(3)
slope <- summary(SLR)$coefficients[2,1] %>% round(3)
r2 <- summary(SLR)$adj.r.squared %>% round(3)
# other model evaluation matric
E <- (sum(subdata$S_M) / length(subdata$S_M)) %>% round(3)
# EF <- 1- sum(subdata$S_M^2)/sum((subdata$log_Ksat-mean(subdata$log_Ksat))^2)
RMSE <- (sum(subdata$S_M^2)/length(subdata$S_M))^0.5 %>% round(3)
d <-  (1- sum(subdata$S_M^2)/sum((abs(subdata$mean-mean(subdata$log_Ksat))+abs(subdata$log_Ksat-mean(subdata$log_Ksat)))^2)) %>% round(3)
p <- t.test(subdata$S_M)$p.value %>% round(3)
results <- rbind(results, data.frame(var_modelType[i], inter, slope, r2, E, RMSE, d, p) )
}
return(results)
}
# getwd()
results2 <- evaluation2()
write.csv(results2, "results2.csv", row.names = F)
results2
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
)
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>% select(Percent_Sand, Percent_Silt, Percent_Clay, Ksat, Ksat_Rosseta, mean, model_type)
i = 3
pred_summary %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(observed_log ~ mean, data = subdata)
subdata %>% ggplot(aes(x = mean, y = observed_log)) + geom_point() + geom_smooth(method = "lm") +
geom_abline(h = 0, v = 0)
histdata %>% ggplot(aes(x = Ksat_Rosseta, y = Ksat)) + geom_point()
pred_summary %>% filter(model_type %in% c("Neural network (no rock)")) %>%
ggplot() +
aes(x = predicted_log, y = mean) +
geom_point(aes(y = observed_log, x = mean),
size = 0.5)
subdata <- pred_summary %>% filter(model_type %in% c("Neural network (no rock)"))
# summary for Table 3
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) -> hist_sum
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>% select(Percent_Sand, Percent_Silt, Percent_Clay, Ksat, Ksat_Rosseta, mean, model_type) -> hist_sum
hist_sum %>% mutate(S_M = log_Ksat - mean) -> hist_sum
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
)
# summary for Table 3
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) -> hist_sum
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>% select(Percent_Sand, Percent_Silt, Percent_Clay, Ksat, Ksat_Rosseta, mean, model_type) -> hist_sum
hist_sum %>% mutate(S_M = log_Ksat - mean) -> hist_sum
# summary for Table 3
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) -> hist_sum
# histdata %>%
#   left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
#                                  "Top_Type")) %>% select(Percent_Sand, Percent_Silt, Percent_Clay, Ksat, Ksat_Rosseta, mean, model_type) -> hist_sum
hist_sum %>% mutate(S_M = log_Ksat - mean) -> hist_sum
var_modelType <- unique(hist_sum$model_type)
evaluation2 <- function () {
results <- data.frame()
for (i in 1:length(var_modelType)) {
hist_sum %>% filter(model_type == var_modelType[i]) -> subdata
SLR <- lm(log_Ksat ~ mean, data = subdata)
inter <- summary(SLR)$coefficients[1,1] %>% round(3)
slope <- summary(SLR)$coefficients[2,1] %>% round(3)
r2 <- summary(SLR)$adj.r.squared %>% round(3)
# other model evaluation matric
E <- (sum(subdata$S_M) / length(subdata$S_M)) %>% round(3)
# EF <- 1- sum(subdata$S_M^2)/sum((subdata$log_Ksat-mean(subdata$log_Ksat))^2)
RMSE <- (sum(subdata$S_M^2)/length(subdata$S_M))^0.5 %>% round(3)
d <-  (1- sum(subdata$S_M^2)/sum((abs(subdata$mean-mean(subdata$log_Ksat))+abs(subdata$log_Ksat-mean(subdata$log_Ksat)))^2)) %>% round(3)
p <- t.test(subdata$S_M)$p.value %>% round(3)
results <- rbind(results, data.frame(var_modelType[i], inter, slope, r2, E, RMSE, d, p) )
}
return(results)
}
# getwd()
results2 <- evaluation2()
write.csv(results2, "results2.csv", row.names = F)
results2
facet_title = c("(a) ANN-no-structure" = "Neural network (no rock)",
"(b) RF-no-structure" = "RandomForest (no rock, no type)",
"(c) RF-with-structure" = "RandomForest (no rock, with type)",
"(d) ROSETTA" = "ROSSETA")
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) %>%
mutate(model_type = fct_recode(model_type, !!!facet_title)) %>%
ggplot() +
aes(x = mean, xmin = q050, xmax = q950, y = log_Ksat) +
geom_errorbarh(color = "grey50", size = 0.5) +
geom_point(size = 0.7) +
geom_smooth(method = "lm", color = "blue", alpha = 0.5, lwd = 0.5, fill = "lightblue") +
geom_abline(linetype = "dashed") +
facet_wrap(model_type~., ncol = 1
, labeller = as_labeller(facet_title)
) +
labs(x = expression(Predicted ~ log (K[fs], cm ~ hr^{-1})),
y = expression(Observed ~ log (K[fs], cm ~ hr^{-1}))) +
theme_cowplot() -> p2
print(p2)
ggsave("Figure3.jpg", width = 4, height = 6, dpi = 300, units = "in")
# ggsave("Figure3.pdf", width = 4, height = 6, dpi = 300, units = "in")
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE,
echo = FALSE, warning = FALSE,
# fig.height = 4, fig.width = 8,
cache = F)
library(ggmap)
library(maps)
library(mapdata)
library(forcats)
library(tidyr)
library(modelr)
library(purrr)
library(ggplot2)
library(cowplot)
library(urbankfs)
# install.packages("here")
# install.packages("randomForest")
library(devtools)
requireNamespace("here", quietly = TRUE)
# devtools::install(here::here())
requireNamespace("randomForest", quietly = TRUE)
library(dplyr)
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE,
echo = FALSE, warning = FALSE,
# fig.height = 4, fig.width = 8,
cache = F)
histdata <- read.csv(here::here("extdata/UrbanSoilK_V3.csv")) %>%
as_tibble() %>%
mutate(Top_Type = factor(Top_Type, soil_type_levels())) %>%
normalize_soil_pct_data(add_rock = FALSE)
histdata$Top_Type <- as.character(histdata$Top_Type)
histdata$Top_Type <- ifelse(is.na(histdata$Top_Type), "SG", histdata$Top_Type)
# plot
theme_set(theme_bw())
map_data("world") %>% select(region) %>% unique()
USA <- map_data("state")
PuertoRico <- map_data("world", region = c("Puerto Rico"), exact = FALSE)
northAmer <- bind_rows(USA, PuertoRico)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray", color = "white") +
geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2
, data = kfs_site_agg) +
geom_point(aes(x = Longitude, y = Latitude), shape = 1, col = "red", data = histdata) +
labs(x = "Longitude", y = "Latitude")
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray", color = "white")
# Set chunks defaults; these options will be applied to all subsequent chunks
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE, echo = FALSE,
fig.height = 5, fig.width = 7)
# OUTPUT_DIR		<- "outputs/"
# LOG_DIR			<- "logs/"
# INFN 			<- "AllCities_Victoria_RDS.csv"
# OUTFN 			<- "MGRsD-data-final.csv"
# SEPARATOR		<- "-------------------------------------------"
# if(!file.exists(OUTPUT_DIR)) dir.create(OUTPUT_DIR)
# if(!file.exists(LOG_DIR)) dir.create( LOG_DIR )
library(cowplot)
library(grid)
library(gridExtra)
install.packages("soiltexture")
library( soiltexture )
# plot
theme_set(theme_bw())
map_data("world") %>% select(region) %>% unique()
USA <- map_data("state")
PuertoRico <- map_data("world", region = c("Puerto Rico"), exact = FALSE)
northAmer <- bind_rows(USA, PuertoRico)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray", color = "white") +
# geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2
#            , data = kfs_site_agg) +
geom_point(aes(x = Longitude, y = Latitude), shape = 1, col = "red", data = histdata) +
labs(x = "Longitude", y = "Latitude")
# ggsave("Figure1-1 Sites.jpg", width = 8, height = 5, units = "in")
