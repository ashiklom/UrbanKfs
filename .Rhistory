train$p.ann_Ksat <- neuralnet::compute(ann_Ksat, train[,c('Percent_Sand' , 'Percent_Silt' , 'Percent_Clay')])$net.result
test$p.ann_Ksat <- neuralnet::compute(ann_Ksat, test[,c('Percent_Sand' , 'Percent_Silt' , 'Percent_Clay')])$net.result
# scale back the value
train$kfs <- train$Unsaturated_K2cm_cmhr * (max(data$Unsaturated_K2cm_cmhr)-min(data$Unsaturated_K2cm_cmhr)) + min(data$Unsaturated_K2cm_cmhr)
train$kfs_m <- train$p.ann_Ksat * (max(data$Unsaturated_K2cm_cmhr)-min(data$Unsaturated_K2cm_cmhr)) + min(data$Unsaturated_K2cm_cmhr)
train$Model <- 'ANN'
# test data
test$kfs <- test$Unsaturated_K2cm_cmhr * (max(data$Unsaturated_K2cm_cmhr)-min(data$Unsaturated_K2cm_cmhr)) + min(data$Unsaturated_K2cm_cmhr)
test$kfs_m <- test$p.ann_Ksat * (max(data$Unsaturated_K2cm_cmhr)-min(data$Unsaturated_K2cm_cmhr)) + min(data$Unsaturated_K2cm_cmhr)
test$Model <- 'ANN'
# correlation
cor(train$kfs_m, train$kfs, method = c("spearman"))
cor(test$kfs_m, test$kfs, method = c("spearman"))
dataRF <- data_rf (data_structure)
train_RF <- dataRF[index,]
test_RF <- dataRF[-index,]
rf1 <- rf_ssc(train_RF)
train_RF
index
set.seed(20191120)
rf2 <- rf_sscs(data_structure)
dataRF <- data_rf (data_structure)
train_RF <- dataRF[index,]
test_RF <- dataRF[-index,]
rf1 <- rf_ssc(train_RF)
data_rf <- function (sdata) {
dataRF <- sdata[,c(which(colnames(sdata)=="Percent_Sand")
, which(colnames(sdata)=="Percent_Silt")
, which(colnames(sdata)=="Percent_Clay")
, which(colnames(sdata)=="Grade")
, which(colnames(sdata)=="Top_Type")
, which(colnames(sdata)=="Ksat_cmhr")
, which(colnames(sdata)=="Unsaturated_K2cm_cmhr")
, which(colnames(sdata)=="BulkDensity_gcm3")   )]
return(dataRF)
}
dataRF <- data_rf (data_structure)
train_RF <- dataRF[index,]
test_RF <- dataRF[-index,]
rf1 <- rf_ssc(train_RF)
# train dataset
train_RF$kfs_m <- predict(rf1, train_RF)
train_RF$Model <- 'rf1'
# test dataset
test_RF$kfs_m <- predict(rf1, test_RF)
test_RF$Model <- 'rf1'
cor(train_RF$kfs_m, train_RF$Unsaturated_K2cm_cmhr, method = c("spearman"))
cor(test_RF$kfs_m, test_RF$Unsaturated_K2cm_cmhr, method = c("spearman"))
set.seed(20191120)
data_structure %>%
select(Unsaturated_K2cm_cmhr, Percent_Sand, Percent_Silt, Percent_Clay,
Percent_Rock_Fragment, BD, Top_Type) %>%
na.omit() -> data_structure
rf2 <- rf_sscs(data_structure)
# train dataset
train_RF2 <- train_RF
train_RF2$kfs_m <- predict(rf2, train_RF2)
# clean function with rock considered
clean_data_rock <- function (data) {
sdata <- data
sdata <- sdata[!is.na(sdata$Unsaturated_K2cm_cmhr), ]
sdata <- sdata[!is.na(sdata$Percent_Sand), ]
sdata <- sdata[!is.na(sdata$Type), ]
sdata <- sdata[,c(which(colnames(sdata)=="Percent_Clay"),which(colnames(sdata)=="Percent_Silt")
, which(colnames(sdata)=="Percent_Sand"), which(colnames(sdata)=="Texture")
, which(colnames(sdata)=="Soil_Series_Type"), which(colnames(sdata)=="Unsaturated_K2cm_cmhr")
, which(colnames(sdata)=="Percent_Rock_Fragment")
, which(colnames(sdata)=="Top_Type")
, which(colnames(sdata)=="BD")
, which(colnames(sdata)=="Rock_group")
)]
sdata <- sdata[!is.na(sdata$Texture),]
colnames(sdata) <- c("CLAY", "SILT", "SAND", "TEXTURE", "UF", "Unsaturated_K2cm_cmhr",
"ROCK", "Top_Type", "BD", "Rock_group")
sdata <- sdata[!is.na(sdata$ROCK),]
# handle NA data
sdata$sum <- sdata$CLAY + sdata$SILT + sdata$SAND
sdata$sscr <- 100- sdata$ROCK
# convert sum to 100
sdata$ratio <- sdata$sscr/sdata$sum
sdata$CLAY <- sdata$CLAY*sdata$ratio
sdata$SILT <- sdata$SILT*sdata$ratio
sdata$SAND <- sdata$SAND*sdata$ratio
sdata <- sdata[sdata$UF == "Urban Observed",]
sdata <- sdata[!is.na(sdata$Unsaturated_K2cm_cmhr),]
sdata <- sdata[!is.na(sdata$CLAY),]
print(paste0('-----------------------obs(n)=',nrow(sdata)))
sdata
}
clean_data_rock(data_orig)
set.seed(20191120)
clean_data_rock(data_orig) ->
data_structure2
rf2 <- rf_sscs(data_structure2)
data_structure2
colnames(data_structure2)
rf_sscs
colnames(data_structure2)
rf_sscs
data_structure2
#*******************************************************************************************************
# RF2 model
rf_sscs <- function(sdata) {
randomForest(Unsaturated_K2cm_cmhr ~ SAND + SILT + CLAY +
ROCK + BD + Top_Type, data=sdata,
ntree = 100,
mtry = 2,
importance = TRUE,
proximity = TRUE)
}
set.seed(20191120)
clean_data_rock(data_orig) ->
data_structure2
rf2 <- rf_sscs(data_structure2)
set.seed(20191120)
clean_data_rock(data_orig) %>%
na.omit() ->
data_structure2
rf2 <- rf_sscs(data_structure2)
# train dataset
train_RF2 <- train_RF
train_RF2$kfs_m <- predict(rf2, train_RF2)
data_structure2
rf_sscs
data_structure2
rf2 <- rf_sscs(data_structure2)
# train dataset
train_RF2 <- train_RF
train_RF2$kfs_m <- predict(rf2, train_RF2)
train_RF2$Model <- 'rf2'
train_RF2$kfs_m <- predict(rf2, train_RF2)
train_RF2
train_RF
# train dataset
train_RF2 <- train_RF
train_RF2$kfs_m <- predict(rf2, train_RF2)
train_RF2$Model <- 'rf2'
# test dataset
test_RF2 <- test_RF
test_RF2$kfs_m <- predict(rf2, test_RF2)
test_RF2$Model <- 'rf2'
cor(train_RF2$kfs_m, train_RF2$Unsaturated_K2cm_cmhr, method = c("spearman"))
cor(test_RF2$kfs_m, test_RF2$Unsaturated_K2cm_cmhr, method = c("spearman"))
importance(rf2, type = 1)
# getwd()
# pdf("Figure A2.pdf", height = 6, width = 8)
rf2_visual(model = rf2)
# dev.off()
# tiff(paste("Figure A2.tiff"), width = 8, height = 6, pointsize = 1/300, units = 'in', res = 300)
rf2_visual(model = rf2)
# dev.off()
set.seed(20191120)
clean_data_rock(data_orig) %>%
na.omit() ->
data_structure2
rf2 <- rf_sscs(data_structure2)
rf2_visual <- function (model) {
p1 <- qplot(1:100, model$mse ) + geom_line() + theme_bw() +
xlab ("Number of trees (n)") + ylab("  MSE ") +
theme(axis.text.x = element_text(face = "bold", size = 12),
axis.text.y = element_text(face = "bold", size = 12),
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
# annotate("text", x = 8, y = 7.15, label = "( a )", size = 6)
# panel (b)
p2 <- qplot(sort(importance(model, type = 1)[1:6]), 1:6) + geom_line() + theme_bw() +
xlab ("Change of MSE (%)") +
theme(axis.text.x = element_text(face = "bold", size = 12),
axis.text.y = element_text(face = "bold", size = 12),
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_blank()
) + scale_y_continuous(labels = c("Structure", "%Silt", "%Clay", "%Sand") )
# annotate("text", x =4.25, y = 3.75, label = "( b )", size = 6)
# panel (c)
p3 <- qplot(sort(importance(model, type = 2)[1:4]), 1:4) + geom_line() + theme_bw() +
xlab ("Change of node purity") +
theme(axis.text.x = element_text(face = "bold", size = 12),
axis.text.y = element_text(face = "bold", size = 12),
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_blank()
) + scale_y_continuous(labels = c(" ", " ", " ", " ") )
# annotate("text", x = 650, y = 3.75, label = "( c )", size = 6)
panel_b <- plot_grid(p2, p3, ncol = 2, labels = c("b", "c"), hjust = c(-9.5, -4), vjust = 2.75)
# print(panel_b)
print(plot_grid(p1, panel_b, nrow = 2, labels = c("a", "")
, hjust = -10, vjust = 2.75 )
)
invisible(list(p1,p2,p3, panel_b))
}
importance(rf2, type = 1)
# getwd()
# pdf("Figure A2.pdf", height = 6, width = 8)
rf2_visual(model = rf2)
# dev.off()
# tiff(paste("Figure A2.tiff"), width = 8, height = 6, pointsize = 1/300, units = 'in', res = 300)
rf2_visual(model = rf2)
# dev.off()
# pdf("Figure A2.pdf", height = 6, width = 8)
rf2_visual(model = rf1)
# tiff(paste("Figure A2.tiff"), width = 8, height = 6, pointsize = 1/300, units = 'in', res = 300)
rf2_visual(model = rf2)
#*******************************************************************************************************
# RF2 model
rf_sscs <- function(sdata) {
randomForest(Unsaturated_K2cm_cmhr ~ SAND + SILT + CLAY +
BD + Top_Type, data=sdata,
ntree = 100,
mtry = 2,
importance = TRUE,
proximity = TRUE)
}
rf2_visual <- function (model) {
p1 <- qplot(1:100, model$mse ) + geom_line() + theme_bw() +
xlab ("Number of trees (n)") + ylab("  MSE ") +
theme(axis.text.x = element_text(face = "bold", size = 12),
axis.text.y = element_text(face = "bold", size = 12),
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
# annotate("text", x = 8, y = 7.15, label = "( a )", size = 6)
# panel (b)
p2 <- qplot(sort(importance(model, type = 1)[1:4]), 1:4) + geom_line() + theme_bw() +
xlab ("Change of MSE (%)") +
theme(axis.text.x = element_text(face = "bold", size = 12),
axis.text.y = element_text(face = "bold", size = 12),
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_blank()
) + scale_y_continuous(labels = c("Structure", "%Silt", "%Clay", "%Sand") )
# annotate("text", x =4.25, y = 3.75, label = "( b )", size = 6)
# panel (c)
p3 <- qplot(sort(importance(model, type = 2)[1:4]), 1:4) + geom_line() + theme_bw() +
xlab ("Change of node purity") +
theme(axis.text.x = element_text(face = "bold", size = 12),
axis.text.y = element_text(face = "bold", size = 12),
axis.title = element_text(face = "bold", size = 12),
axis.title.y = element_blank()
) + scale_y_continuous(labels = c(" ", " ", " ", " ") )
# annotate("text", x = 650, y = 3.75, label = "( c )", size = 6)
panel_b <- plot_grid(p2, p3, ncol = 2, labels = c("b", "c"), hjust = c(-9.5, -4), vjust = 2.75)
# print(panel_b)
print(plot_grid(p1, panel_b, nrow = 2, labels = c("a", "")
, hjust = -10, vjust = 2.75 )
)
invisible(list(p1,p2,p3, panel_b))
}
set.seed(20191120)
clean_data_rock(data_orig) %>%
na.omit() ->
data_structure2
rf2 <- rf_sscs(data_structure2)
importance(rf2, type = 1)
# getwd()
# pdf("Figure A2.pdf", height = 6, width = 8)
rf2_visual(model = rf2)
# dev.off()
# tiff(paste("Figure A2.tiff"), width = 8, height = 6, pointsize = 1/300, units = 'in', res = 300)
rf2_visual(model = rf2)
# dev.off()
#*******************************************************************************************************
# RF2 model
rf_sscs <- function(sdata) {
randomForest(Unsaturated_K2cm_cmhr ~ SAND + SILT + CLAY +
Top_Type, data=sdata,
ntree = 100,
mtry = 2,
importance = TRUE,
proximity = TRUE)
}
set.seed(20191120)
clean_data_rock(data_orig) %>%
na.omit() ->
data_structure2
rf2 <- rf_sscs(data_structure2)
importance(rf2, type = 1)
# getwd()
# pdf("Figure A2.pdf", height = 6, width = 8)
rf2_visual(model = rf2)
# dev.off()
# tiff(paste("Figure A2.tiff"), width = 8, height = 6, pointsize = 1/300, units = 'in', res = 300)
rf2_visual(model = rf2)
# dev.off()
#*******************************************************************************************************
# RF2 model
rf_sscs <- function(sdata) {
randomForest(Unsaturated_K2cm_cmhr ~ Percent_Sand + Percent_Silt + Percent_Clay + Top_Type, data=sdata,
ntree = 100,
mtry = 2,
importance = TRUE,
proximity = TRUE)
}
set.seed(20191120)
# clean_data_rock(data_orig) %>%
#   na.omit() ->
#   data_structure2
rf2 <- rf_sscs(data_structure)
importance(rf2, type = 1)
# getwd()
# pdf("Figure A2.pdf", height = 6, width = 8)
rf2_visual(model = rf2)
# dev.off()
# tiff(paste("Figure A2.tiff"), width = 8, height = 6, pointsize = 1/300, units = 'in', res = 300)
rf2_visual(model = rf2)
# dev.off()
data_structure
data_structure <- update_structure(data_orig)
set.seed(20191120)
# clean_data_rock(data_orig) %>%
#   na.omit() ->
#   data_structure2
rf2 <- rf_sscs(data_structure)
importance(rf2, type = 1)
# getwd()
# pdf("Figure A2.pdf", height = 6, width = 8)
rf2_visual(model = rf2)
# dev.off()
# tiff(paste("Figure A2.tiff"), width = 8, height = 6, pointsize = 1/300, units = 'in', res = 300)
rf2_visual(model = rf2)
# dev.off()
data_structure2
clean_data_rock(data_orig) %>%
na.omit() %>%
select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr, ROCK, BD)
clean_data_rock(data_orig) %>%
na.omit() %>%
select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr, ROCK, BD) ->
data_structure2
# stepwise
library(MASS)
clean_data_rock(data_orig) %>%
na.omit() %>%
select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr, ROCK, BD) ->
data_structure2
# stepwise
library(MASS)
clean_data_rock(data_orig) %>%
na.omit() %>%
tidverse::select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr, ROCK, BD) ->
data_structure2
clean_data_rock(data_orig) %>%
na.omit() %>%
dplyr::select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr, ROCK, BD) ->
data_structure2
library(MASS)
clean_data_rock(data_orig) %>%
na.omit() %>%
dplyr::select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr, ROCK, BD) ->
data_structure2
# stepwise
library(MASS)
clean_data_rock(data_orig) %>%
na.omit() %>%
dplyr::select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr, ROCK, BD) ->
data_structure2
# Fit the full model
full.model <- lm(Unsaturated_K2cm_cmhr ~., data = data_structure2)
# Stepwise regression model
step.model <- stepAIC(full.model, direction = "both",
trace = FALSE)
summary(step.model)
summary(full.model)
facet_title = c("(a) ANN-no-structure" = "Neural network (no rock)",
"(b) RF-no-structure" = "RandomForest (no rock, no type)",
"(c) RF-with-structure" = "RandomForest (no rock, with type)",
"(d) ROSETTA" = "ROSETTA")
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) %>%
mutate(model_type = fct_recode(model_type, !!!facet_title)) %>%
ggplot() +
aes(x = mean, xmin = q050, xmax = q950, y = log_Ksat) +
geom_errorbarh(color = "grey50", size = 0.5) +
geom_point(size = 0.7) +
geom_smooth(method = "lm", color = "blue", alpha = 0.5, lwd = 0.5, fill = "lightblue") +
geom_abline(linetype = "dashed") +
facet_wrap(model_type~., ncol = 1
, labeller = as_labeller(facet_title)
) +
labs(x = expression(Predicted ~ log (K[fs], cm ~ hr^{-1})),
y = expression(Observed ~ log (K[fs], cm ~ hr^{-1}))) +
theme_cowplot() -> p2
facet_title = c("(a) ANN-no-structure" = "Neural network (no rock)",
"(b) RF-no-structure" = "RandomForest (no rock, no type)",
"(c) RF-with-structure" = "RandomForest (no rock, with type)",
"(d) ROSETTA" = "ROSSETA")
bind_rows(
histdata %>%
transmute(
mean = log(Ksat_Rosseta),
log_Ksat = log(Ksat),
q050 = log_Ksat,
q950 = log_Ksat,
model_type = "ROSSETA"
) %>%
filter_if(is.numeric, all_vars(is.finite(.))),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
mutate(log_Ksat = log(Ksat)) %>%
select(mean, log_Ksat, q050, q950, model_type)
) %>%
mutate(model_type = fct_recode(model_type, !!!facet_title)) %>%
ggplot() +
aes(x = mean, xmin = q050, xmax = q950, y = log_Ksat) +
geom_errorbarh(color = "grey50", size = 0.5) +
geom_point(size = 0.7) +
geom_smooth(method = "lm", color = "blue", alpha = 0.5, lwd = 0.5, fill = "lightblue") +
geom_abline(linetype = "dashed") +
facet_wrap(model_type~., ncol = 1
, labeller = as_labeller(facet_title)
) +
labs(x = expression(Predicted ~ log (K[fs], cm ~ hr^{-1})),
y = expression(Observed ~ log (K[fs], cm ~ hr^{-1}))) +
theme_cowplot() -> p2
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE,
echo = FALSE, warning = FALSE,
# fig.height = 4, fig.width = 8,
cache = F)
histdata <- read.csv(here::here("extdata/UrbanSoilK_V3.csv")) %>%
as_tibble() %>%
mutate(Top_Type = factor(Top_Type, soil_type_levels())) %>%
normalize_soil_pct_data(add_rock = FALSE)
histdata$Top_Type <- as.character(histdata$Top_Type)
histdata$Top_Type <- ifelse(is.na(histdata$Top_Type), "SG", histdata$Top_Type)
# prepare data
site <- read.csv("All_SSURGO_and_Point.csv")
kfsdata <- read.csv("All_SSURGO_and_Surface_HC.csv")
left_join(site %>% select(SampleSite_ID,SamplePoint_ID, Longitude, Latitude),
kfsdata %>% select(SampleSite_ID,SamplePoint_ID, Unsaturated_K2cm_cmhr) %>%
filter(!is.na(Unsaturated_K2cm_cmhr))) %>%
filter(!is.na(Unsaturated_K2cm_cmhr)) -> kfs_site
# Set chunks defaults; these options will be applied to all subsequent chunks
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE, echo = FALSE,
fig.height = 5, fig.width = 7)
# if(!file.exists(OUTPUT_DIR)) dir.create(OUTPUT_DIR)
# if(!file.exists(LOG_DIR)) dir.create( LOG_DIR )
library(cowplot)
library(grid)
library(gridExtra)
# install.packages("soiltexture")
# library( soiltexture )
library("ggpubr")
library(ggplot2)
# install.packages("randomForest")
library(randomForest)
# install.packages('neuralnet')
library(neuralnet)
library(reshape)
library(scales)
library(devtools)
library(dplyr)
library(readxl)
source('functions.R')
theme_set(theme_bw())
comb_data <- function(){
# Read and clean data
histdata <- read.csv(here::here("extdata/UrbanSoilK_V3.csv"))
subhist <- histdata[, c(5,4,3,9)]
head(subhist)
colnames(subhist) <- c("CLAY", "SILT", "SAND", "Unsaturated_K2cm_cmhr")
subhist$col <- "red"
# resetta test data
test_rosetta <- read.csv(here::here("extdata/test_with_rosetta_V3.csv"))
test_rosetta$Model <- 'ROSETTA'
# filt and clean data for soil triangle plot (Figure 1)
data_orig <- read.csv(here::here("extdata/AllCities_Victoria_RDS_rock.csv"))
combdata <- clean_data(data_orig)
combdata %>%
select(CLAY, SILT, SAND, Unsaturated_K2cm_cmhr) ->
combdata
combdata$col <- "blue"
colnames(combdata) <- colnames (subhist)
combdata <- rbind(combdata, subhist)
return(combdata)
}
combdata <- comb_data()
# Set chunks defaults; these options will be applied to all subsequent chunks
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE, echo = FALSE,
fig.height = 5, fig.width = 7)
# if(!file.exists(OUTPUT_DIR)) dir.create(OUTPUT_DIR)
# if(!file.exists(LOG_DIR)) dir.create( LOG_DIR )
library(cowplot)
library(grid)
library(gridExtra)
# install.packages("soiltexture")
# library( soiltexture )
library("ggpubr")
library(ggplot2)
# install.packages("randomForest")
library(randomForest)
# install.packages('neuralnet')
library(neuralnet)
library(reshape)
library(scales)
library(devtools)
library(dplyr)
library(readxl)
source('functions.R')
theme_set(theme_bw())
