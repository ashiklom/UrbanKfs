class(northAmer$subregion)
northAmer %>% filter(subregion %in% "Alasika")
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(subregion %in% "Alaska") -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group, fill = subregion))
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% "Alaska")) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group, fill = subregion))
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group, fill = subregion))
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group))
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray")
kfs_site %>% select(Latitude, Longitude) %>%
filter(Longitude < 0) %>%
unique() -> kfs_site_agg
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), data = kfs_site_agg)
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), data = kfs_site_agg) +
theme_set(theme_bw())
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), data = kfs_site_agg)
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude, shape = 18, stroke = 1 , color = "blue")
, data = kfs_site_agg)
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), shape = 18, stroke = 1 , color = "blue"
, data = kfs_site_agg)
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2,
, data = kfs_site_agg)
# plot
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2
, data = kfs_site_agg) +
labs(x = "Longitude", y = "Latitude")
# plot
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2
, data = kfs_site_agg) +
labs(x = "Longitude", y = "Latitude")
ggsave("Figure1_Sites.jpg", width = 8, height = 4, units = "in")
# plot
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2
, data = kfs_site_agg) +
labs(x = "Longitude", y = "Latitude")
ggsave("Figure1_Sites.jpg", width = 8, height = 5, units = "in")
histdata <- read.csv(here::here("extdata/UrbanSoilK_V3.csv")) %>%
as_tibble() %>%
mutate(Top_Type = factor(Top_Type, soil_type_levels())) %>%
normalize_soil_pct_data(add_rock = FALSE)
histdata
# plot
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2
, data = kfs_site_agg) +
geom_point(aes(x = Longitude, y = Latitude), shape = 1, col = "red", data = histdata) +
labs(x = "Longitude", y = "Latitude")
ggsave("Figure1_Sites.jpg", width = 8, height = 5, units = "in")
histdata <- read.csv(here::here("extdata/UrbanSoilK_V3.csv")) %>%
as_tibble() %>%
mutate(Top_Type = factor(Top_Type, soil_type_levels())) %>%
normalize_soil_pct_data(add_rock = FALSE)
# plot
theme_set(theme_bw())
northAmer <- map_data("world", region = c("USA"), exact = FALSE)
northAmer <- northAmer %>% filter(long < 0)
northAmer %>% filter(!(subregion %in% c("Hawaii","Alaska"))) -> northAmer
ggplot(data = northAmer) +
geom_polygon(aes(x = long, y = lat, group=group), fill = "gray") +
geom_point(aes(x = Longitude, y = Latitude), shape = 3, color = "blue", size = 2
, data = kfs_site_agg) +
geom_point(aes(x = Longitude, y = Latitude), shape = 1, col = "red", data = histdata) +
labs(x = "Longitude", y = "Latitude")
ggsave("Figure1_Sites.jpg", width = 8, height = 5, units = "in")
model_rock_type <- tribble(
~model_type, ~use_rock, ~top_type,
"ann", FALSE, FALSE,
"annr", TRUE, FALSE,
"rf1", FALSE, FALSE,
"rf1r", TRUE, FALSE,
"rf2", FALSE, TRUE,
"rf2r", TRUE, TRUE
)
pred <- fitted_models %>%
select(sample, train_data, test_data, model_type, model_fit) %>%
gather(data_type, data, train_data, test_data) %>%
left_join(model_rock_type, by = "model_type") %>%
mutate(
# Subset the data so that it first the needs of the model
data_prep = pmap(list(data, use_rock, top_type), prepare_data),
# Actually run the predictions
predicted = map2(model_fit, data_prep, predict),
# Make the model_type labels plot-ready
model_type = fct_recode(model_type, !!!pretty_model_types())
)
pred_fits <- pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup() %>%
mutate(
coefficients = map(fit, coefficients),
slope = map_dbl(coefficients, 2),
intercept = map_dbl(coefficients, 1),
r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
)
fitted_models_norock <- fitted_models %>%
left_join(model_rock_type, "model_type") %>%
filter(!use_rock)
hist_predict <- predict_bootstrap(histdata, fitted_models_norock)
hist_summary <- summary(hist_predict)
hist_summary
pred_fits <- pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup() %>%
mutate(
coefficients = map(fit, coefficients),
slope = map_dbl(coefficients, 2),
intercept = map_dbl(coefficients, 1),
r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
)
obs <- tibble(
predicted = fitted_models %>%
unnest(train_data) %>%
pull(Unsaturated_K2cm_cmhr) %>%
seq_range(20)
)
pred_lm <- pred_fits %>%
mutate(xpred = list(obs),
lmpred = map2(fit, xpred, predict)) %>%
unnest(xpred, lmpred) %>%
group_by(model_type, predicted) %>%
summarize_at(vars(lmpred), list(
mean = mean,
sd = sd,
lo = ~quantile(., 0.1),
hi = ~quantile(., 0.9)
))
pred_fits <- pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup() %>%
mutate(
coefficients = map(fit, coefficients),
slope = map_dbl(coefficients, 2),
intercept = map_dbl(coefficients, 1),
r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
)
library(ggmap)
library(maps)
library(mapdata)
library(dplyr)
library(forcats)
library(tidyr)
library(modelr)
library(purrr)
library(ggplot2)
library(cowplot)
library(urbankfs)
# install.packages("here")
# install.packages("randomForest")
library(devtools)
requireNamespace("here", quietly = TRUE)
# devtools::install(here::here())
requireNamespace("randomForest", quietly = TRUE)
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE,
echo = FALSE, warning = FALSE,
# fig.height = 4, fig.width = 8,
cache = F)
model_rock_type <- tribble(
~model_type, ~use_rock, ~top_type,
"ann", FALSE, FALSE,
"annr", TRUE, FALSE,
"rf1", FALSE, FALSE,
"rf1r", TRUE, FALSE,
"rf2", FALSE, TRUE,
"rf2r", TRUE, TRUE
)
pred <- fitted_models %>%
select(sample, train_data, test_data, model_type, model_fit) %>%
gather(data_type, data, train_data, test_data) %>%
left_join(model_rock_type, by = "model_type") %>%
mutate(
# Subset the data so that it first the needs of the model
data_prep = pmap(list(data, use_rock, top_type), prepare_data),
# Actually run the predictions
predicted = map2(model_fit, data_prep, predict),
# Make the model_type labels plot-ready
model_type = fct_recode(model_type, !!!pretty_model_types())
)
fitted_models_norock <- fitted_models %>%
left_join(model_rock_type, "model_type") %>%
filter(!use_rock)
hist_predict <- predict_bootstrap(histdata, fitted_models_norock)
hist_summary <- summary(hist_predict)
hist_summary
pred_fits <- pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup() %>%
mutate(
coefficients = map(fit, coefficients),
slope = map_dbl(coefficients, 2),
intercept = map_dbl(coefficients, 1),
r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
)
pred
pred_fits <- pred %>%
filter(data_type == "test_data")
pred_fits <- pred %>%
filter(data_type == "test_data")
pred %>%
filter(data_type == "test_data")
pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted)
pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted)
pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type)
pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted)))
pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup()
pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup() %>%
mutate(
coefficients = map(fit, coefficients),
slope = map_dbl(coefficients, 2),
intercept = map_dbl(coefficients, 1),
r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
)
pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup() %>%
mutate(
coefficients = map(fit, coefficients),
slope = map_dbl(coefficients, 2),
intercept = map_dbl(coefficients, 1)
# r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
)
pred_fits <- pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup() %>%
mutate(
coefficients = map(fit, coefficients),
slope = map_dbl(coefficients, 2)
# intercept = map_dbl(coefficients, 1)
# r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
)
pred_fits <- pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
select(sample, model_type, observed = Unsaturated_K2cm_cmhr, predicted) %>%
group_by(sample, model_type) %>%
summarize(fit = list(lm(observed ~ predicted))) %>%
ungroup()
# mutate(
#   coefficients = map(fit, coefficients),
#   slope = map_dbl(coefficients, 2),
#   intercept = map_dbl(coefficients, 1),
#   r2 = map_dbl(fit, ~summary(.)[["adj.r.squared"]])
# )
obs <- tibble(
predicted = fitted_models %>%
unnest(train_data) %>%
pull(Unsaturated_K2cm_cmhr) %>%
seq_range(20)
)
pred_lm <- pred_fits %>%
mutate(xpred = list(obs),
lmpred = map2(fit, xpred, predict)) %>%
unnest(xpred, lmpred) %>%
group_by(model_type, predicted) %>%
summarize_at(vars(lmpred), list(
mean = mean,
sd = sd,
lo = ~quantile(., 0.1),
hi = ~quantile(., 0.9)
))
pred_summary <- pred %>%
filter(data_type == "test_data") %>%
unnest(data_prep, predicted) %>%
group_by(model_type, observed = Unsaturated_K2cm_cmhr) %>%
summarize_at(vars(predicted), list(
mean = mean,
sd = sd,
lo = ~quantile(., 0.1),
hi = ~quantile(., 0.9),
n = length
))
fig_regression_cap <- paste0(
"Observed vs. predicted regression for neural network and random forest models. ",
"Dashed line is the 1:1 fit, and blue shaded region is the observed ~ predicted regression."
)
facet_title = c("Neural network (no rock)" = "(a) ANN-no-structure"
,"RandomForest (no rock, no type)" = "(b) RF-no-structure"
,"RandomForest (no rock, with type)" = "(c) RF-with-structure"
)
pred_summary %>% filter(model_type %in% c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)")) %>%
ggplot(aes(x = mean, y = observed)) +  geom_point(size = 0.5) +
facet_wrap(model_type~., ncol = 1
, labeller = as_labeller(facet_title)
) +
geom_errorbarh(aes(y = observed, xmin = lo, xmax = hi, x = NULL),
color = "gray40",
size = 0.5) +
# geom_ribbon(
#   data = pred_lm %>% filter(model_type %in% c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)")),
#   aes(ymin = lo, ymax = hi, y = NULL),
#   alpha = 0.5,
#   fill = "lightblue"
# ) +
geom_abline(linetype = "dashed") +
geom_smooth(method = "lm", color = "blue", se = T, fill="lightblue", alpha = 0.5, lwd = 0.5) +
# geom_line(aes(y = observed), data = pred_lm %>%
#             filter(model_type %in% c("Neural network (no rock)", "RandomForest (no rock, no type)", "RandomForest (no rock, with type)")) ) +
labs(x = expression('Predicted K'[fs] ~ (cm ~ hr^{-1})),
y = expression('Observed K'[fs] ~ (cm ~ hr^{-1}))) +
theme_cowplot() -> p1
# evaluation dataset (n=20)
facet_title = c("Neural network (no rock)" = "(a) ANN-no-structure"
,"RandomForest (no rock, no type)" = "(b) RF-no-structure"
,"RandomForest (no rock, with type)" = "(c) RF-with-structure"
)
fig_urbandata_cap <- paste0(
"Predicted vs. observed plot for urban data. ",
"Dashed line is the 1:1 fit, and blue line with grey shading is a `observed ~ predicted` linear fit."
)
plot_grid(p1)
ggsave("Figure2.jpg", width = 4, height = 6, dpi = 300, units = "in")
ggsave("Figure2.pdf", width = 4, height = 6, dpi = 300, units = "in")
facet_title = c("Neural network (no rock)" = "(a) ANN-no-structure"
,"RandomForest (no rock, no type)" = "(b) RF-no-structure"
,"RandomForest (no rock, with type)" = "(c) RF-with-structure"
,"ROSSETA" = "(d) ROSETTA"
)
bind_rows(
histdata %>% select(`mean` = Ksat_Rosseta, Ksat) %>% mutate(q050 = Ksat, q950 = Ksat, model_type = "ROSSETA"),
histdata %>%
left_join(hist_summary, by = c("Percent_Sand", "Percent_Silt", "Percent_Clay",
"Top_Type")) %>%
select(mean, q050, q950, Ksat, model_type) ) %>%
ggplot() +
aes(x = mean, xmin = q050, xmax = q950, y = Ksat) +
geom_errorbarh(color = "grey50", size = 0.5) +
geom_point(size = 0.7) +
geom_smooth(method = "lm", color = "blue", alpha = 0.5, lwd = 0.5, fill = "lightblue") +
geom_abline(linetype = "dashed") +
facet_wrap(model_type~., ncol = 1
, labeller = as_labeller(facet_title)
) +
labs(x = expression("Predicted K"[fs] ~ (cm ~ hr^-1)),
y = expression("Observed K"[fs] ~ (cm ~ hr^-1))) +
theme_cowplot() +
coord_cartesian(xlim = c(0, 75)) -> p2
print(p2)
ggsave("Figure3.jpg", width = 4, height = 6, dpi = 300, units = "in")
ggsave("Figure3.pdf", width = 4, height = 6, dpi = 300, units = "in")
# Set chunks defaults; these options will be applied to all subsequent chunks
knitr::opts_chunk$set(results = 'hide', message = TRUE, include = TRUE, echo = FALSE,
fig.height = 5, fig.width = 7)
# OUTPUT_DIR		<- "outputs/"
# LOG_DIR			<- "logs/"
# INFN 			<- "AllCities_Victoria_RDS.csv"
# OUTFN 			<- "MGRsD-data-final.csv"
# SEPARATOR		<- "-------------------------------------------"
# if(!file.exists(OUTPUT_DIR)) dir.create(OUTPUT_DIR)
# if(!file.exists(LOG_DIR)) dir.create( LOG_DIR )
library(cowplot)
library(grid)
library(gridExtra)
# install.packages("soiltexture")
# library( soiltexture )
library("ggpubr")
library(ggplot2)
# install.packages("randomForest")
library(randomForest)
# install.packages('neuralnet')
library(neuralnet)
library(reshape)
library(scales)
library(devtools)
library(dplyr)
source('functions.R')
theme_set(theme_bw())
# -------------------------------------------
# Read and clean data
histdata <- read.csv(here::here("extdata/UrbanSoilK_V3.csv"))
subhist <- histdata[, c(5,4,3,9)]
head(subhist)
colnames(subhist) <- c("CLAY", "SILT", "SAND", "Unsaturated_K2cm_cmhr")
subhist$col <- "red"
data_orig <- read.csv(here::here("extdata/AllCities_Victoria_RDS.csv"))
# resetta test data
test_rosetta <- read.csv(here::here("extdata/test_with_rosetta_V3.csv"))
test_rosetta$Model <- 'ROSETTA'
# filt and clean data for soil triangle plot (Figure 1)
combdata <- clean_data(data_orig)
combdata$Unsaturated_K2cm_cmhr %>% min()
combdata$Unsaturated_K2cm_cmhr %>% max()
combdata$Unsaturated_K2cm_cmhr %>% mean()
combdata <- combdata[,c(1,2,3,6)]
combdata$col <- "blue"
colnames(combdata) <- colnames (subhist)
combdata <- rbind(combdata, subhist)
data_orig %>% select(Type) %>% unique()
sort(unique(data_orig$Type))
